# Name of this GitHub Actions workflow.
name: Static Self-hosted Security Tests

# Define when this workflow will run
on:
  # Scan changed files in PRs (diff-aware scanning):
  pull_request:
    # Trigger on any activity within a pull request
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch:
    # Allows manual triggering of the workflow
  # Scan mainline branches if there are changes to .github/workflows/semgrep.yml:
  push:
    branches:
      - main
      - master
    paths:
      - '.github/workflows/semgrep.yml' # Only trigger if this file changes

# Set permissions for the workflow
permissions:
  contents: read # Allows the workflow to checkout your code
  security-events: write # Allows the workflow to write security events (like SARIF results)

# Define the jobs that will run as part of this workflow
jobs:
  # Job to send a Discord notification when the workflow starts
  Discord-Begin:
    # Specifies the runner environment for this job
    runs-on: ubuntu-latest
    # Define the steps to be executed in this job
    steps:
      # Step to send a Discord notification
      - name: Discord Notification - Workflow Start
        # Uses the community-maintained Discord webhook action
        uses: tsickert/discord-webhook@v5.3.0
        # Configure the action with webhook details and message content
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }} # Your Discord webhook URL stored as a secret
          username: ${{ github.repository }} # Sets the username for the Discord message
          avatar-url: https://gravatar.com/avatar/be5d3fe06696117c467f199ddb4f1aed?s=400&d=robohash&r=g # Optional avatar URL
          embed-title: "Security Pipeline Started" # Title of the Discord embed
          embed-url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" # Link to the specific workflow run
          embed-description: "The security analysis pipeline has started for the **${{ github.ref_name }}** branch. [View details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" # Description with a link
          embed-author-name: "${{ github.triggering_actor }}" # The GitHub user who triggered the workflow

  # Job to perform static application security testing using Semgrep
  semgrep:
    # User-defined name for this job
    name: Semgrep Scan
    # Specifies the runner environment for this job (self-hosted Linux machines)
    runs-on: [self-hosted, Linux]
    # Define the container to run the Semgrep analysis in
    container:
      # The official Semgrep Docker image
      image: semgrep/semgrep
    # Prevent this job from running on pull requests initiated by Dependabot
    if: (github.actor != 'dependabot[bot]')
    # Define the steps to be executed in this job
    steps:
      # Step to checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v4
      # Step to run the Semgrep CI command and save the output
      - name: Run Semgrep Analysis
        run: semgrep ci --sarif --output=semgrep_output.sarif | tee semgrep_output.txt
        # Environment variables to be passed to the Semgrep command
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }} # Your Semgrep AppSec Platform token stored as a secret
      # Step to upload the Semgrep SARIF output as an artifact
      - name: Upload Semgrep SARIF Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep_output.sarif
      # Step to send a Discord notification when the Semgrep job completes
      - name: Discord Notification - Semgrep Completed
        uses: tsickert/discord-webhook@v5.3.0
        # Ensures this step runs regardless of the job outcome (success or failure)
        if: always()
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }} # Your Discord webhook URL
          embed-title: "Semgrep Scan Completed" # Title of the Discord embed
          embed-description: "**Semgrep scan** completed with status: **${{ job.status }}**. You can download the [Semgrep analysis report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts) under the 'Artifacts' section." # Description with a link to artifacts
          embed-color: "${{ job.status == 'success' && '3066993' || job.status == 'failure' && '15158332' || '9807270' }}" # Sets color based on job status (green for success, red for failure, yellow otherwise)

  # Job to perform software composition analysis using Snyk
  snyk:
    # User-defined name for this job
    name: Snyk Scan
    # Specifies the runner environment for this job (self-hosted Linux machines)
    runs-on: [self-hosted, Linux]
    # Define the steps to be executed in this job
    steps:
      # Step to checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@master # Using 'master' is generally discouraged, 'v4' is recommended for consistency
      # Step to run the Snyk monitor command to check for vulnerabilities
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master # Using 'master' is generally discouraged, specify a version
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Your Snyk API token stored as a secret
        with:
          command: monitor
          sarif: true # Generate SARIF output
          output: snyk_output.sarif # Specify the output file name
      # Step to upload the Snyk SARIF output as an artifact
      - name: Upload Snyk SARIF Report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk_output.sarif
      # Step to send a Discord notification when the Snyk job completes
      - name: Discord Notification - Snyk Completed
        uses: tsickert/discord-webhook@v5.3.0
        # Ensures this step runs regardless of the job outcome
        if: always()
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }} # Your Discord webhook URL
          embed-title: "Snyk Scan Completed" # Title of the Discord embed
          embed-description: "**Snyk scan** completed with status: **${{ job.status }}**. You can download the [Snyk analysis report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts) under the 'Artifacts' section." # Description with a link to artifacts
          embed-color: "${{ job.status == 'success' && '3066993' || job.status == 'failure' && '15158332' || '9807270' }}" # Sets color based on job status

  # Job to send a Discord notification when the entire workflow completes
  Discord-End:
    # Specifies that this job will only run after the 'semgrep' and 'snyk' jobs have completed (regardless of their status)
    needs: [Discord-Begin, semgrep, snyk]
    # Specifies the runner environment for this job
    runs-on: ubuntu-latest
    # Define the steps to be executed in this job
    steps:
      # Step to send a Discord notification
      - name: Discord Notification - Workflow Completed
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }} # Your Discord webhook URL
          username: ${{ github.repository }} # Sets the username for the Discord message
          embed-title: "Security Pipeline Completed" # Title of the Discord embed
          embed-url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" # Link to the specific workflow run
          embed-description: "The security analysis pipeline has completed with overall status: **${{ job.status }}**. You can find the security reports in the 'Artifacts' section of this run." # Description with a link
          embed-color: "${{ job.status == 'success' && '3066993' || job.status == 'failure' && '15158332' || '9807270' }}" # Sets color based on workflow status
          embed-author-name: "${{ github.triggering_actor }}" # The GitHub user who triggered the workflow
