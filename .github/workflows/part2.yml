# Name of this GitHub Actions workflow.
name: Static Self hosted security tests

on:
  # Scan changed files in PRs (diff-aware scanning):
  pull_request: {}
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Scan mainline branches if there are changes to .github/workflows/semgrep.yml:
  push:
    branches:
      - main
      - master


# Define jobs
permissions:
  contents: read
  security-events: write

jobs:

  Discord-Begin:
      runs-on: ubuntu-latest
      steps:
      - name: Discord Notification start
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          username: ${{github.repository}}
          embed-title: "Security Pipeline jobs are starting..."
          embed-url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          embed-description: "[Action details ${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          embed-author-name: "${{ github.triggering_actor }}"
          
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci scan
    # Running on self hosting only works for linux machinens should work now
    runs-on: [self-hosted, Linux]
  
    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci | tee semgrep_output.txt
        env:
          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep AppSec Platform > Settings
          # and add it to your GitHub secrets.
           SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      - name: Upload Semgrep Output
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-output
          path: semgrep_output.sarif
      - name: Discord Notification (Job Completion)
        uses: tsickert/discord-webhook@v5.3.0
        if: always() # Ensures it runs even if the job fails
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: " SAST scan using Semgrep Completed"
          embed-description: "**Semgrep scan**  completedwith status: **${{ job.status }}** Download the [security report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) under the 'Artifacts' section."
          embed-color: "${{ job.status == 'success' && '3066993' || job.status == 'failure' && '15158332' || '9807270' }}"
          
  # Tst for scan        
  snyk:
    name: snyk/docker-security scan
    # Again running on self hosting only works for linux machinens
    runs-on: [self-hosted, Linux]
    
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - name: Upload Semgrep Output
        uses: actions/upload-artifact@v4
        with:
          name: synk-output
          path: synk_output.sarif
      - name: Discord Notification (Job Completion)
        uses: tsickert/discord-webhook@v5.3.0
        if: always() # Ensures it runs even if the job fails
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "SCA scan using Snyk completed"
          embed-description: "**Snyk scan** completed with status: **${{ job.status }}**"
          embed-color: "${{ job.status == 'success' && '3066993' || job.status == 'failure' && '15158332' || '9807270' }}"


